-- TODO: define package

center_controller.vhd -- TODO: rename
entity center_controller is
    generic
    (
        SYS_CLK: integer := 80000000
    );
    port
    (
        RST: in std_logic;
        CLK: in std_logic;
        PIC_LOADED: in std_logic; -- TODO: 这个信号实际上是RST
    	NEW_GAME: in std_logic; -- ???
    	GAME_OVER: out std_logic; -- ???
        
        -- VGA
        VGA_HSYNC: out std_logic;
        VGA_VSYNC: out std_logic;
        VGA_RED: out std_logic_vector(3 downto 0);
        VGA_GREEN: out std_logic_vector(3 downto 0);
        VGA_BLUE: out std_logic_vector(3 downto 0)
        
        -- UART (2 players)
        RX0: in std_logic;
        RX1: in std_logic;

        -- SRAM
        SRAM_ADDR: out std_logic_vector(19 downto 0)
        SRAM_DQ: inout std_logic_vector(31 downto 0)
        SRAM_OE_n: out std_logic;
        SRAM_WE_n: out std_logic;

        -- LED
        LED: out std_logic_vector(3 downto 0);
        
        -- digital tube (???)
        DIGITAL_TUBE1: out std_logic_vector(6 downto 0);
        DIGITAL_TUBE2: out std_logic_vector(6 downto 0);
        DIGITAL_TUBE3: out std_logic_vector(6 downto 0); 

        -- SD CARD -- TODO
        SD_CLK: out std_logic;
        SD_CMD: out std_logic;
        SD_DATA0_DO: out std_logic;
        SD_DATA1_RES: out std_logic;
        SD_DATA2: out std_logic;
        SD_DATA3_CD: out std_logic;
        SD_NCD: out std_logic;
        SD_WP: out std_logic
    );
end;

game_logic.vhd
entity game_logic is
    generic
    (
        MAX_LIFE: integer := 5
        MAX_CROW: integer := 4
        MAX_BULLET_PER_CROW: integer := 4
    );
    port
    (
    	RST: in std_logic; -- 这个信号实际上是RST
    	CLK: in std_logic;
    	RANDOM_SEED: in std_logic_vector(15 downto 0);

    	POS: in std_logic_vector(15 downto 0);
        V: in std_logic_vector(15 downto 0);
    	
        game_state : out STATE;
    );
end;

sram_controller.vhd
entity sram_controller is
    port
    (
    	CLK: in std_logic;
        RST: in std_logic;

        -- TODO: refactor, 分离inout
        VGA_ADDR: in std_logic_vector(19 downto 0);
        VGA_DQ: inout std_logic_vector(15 downto 0);
        VGA_WE_n: in std_logic;
        VGA_OE_n: in std_logic;
        VGA_READY: out std_logic;

        BOOT_ADDR: in std_logic_vector(19 downto 0);
        BOOT_DQ: inout std_logic_vector(15 downto 0);
        BOOT_WE_n: in std_logic;
        BOOT_OE_n: in std_logic;

        RENDER_ADDR: in std_logic_vector(19 downto 0);
        RENDER_DQ: inout std_logic_vector(15 downto 0);
        RENDER_WE_n: in std_logic;
        RENDER_OE_n: in std_logic;
        RENDER_READY: out std_logic;

        RAM_ADDR: out std_logic_vector(19 downto 0);
        RAM_DQ: inout std_logic_vector(15 downto 0);
        RAM_WE_n: out std_logic;
        RAM_OE_n: out std_logic;
    );
end;

imu.vhd
entity imu is
    port
    (
        CLK: in std_logic;
        RST: in std_logic;
        DATA: in std_logic_vector(7 downto 0);
        READY: in std_logic;
        
        ERROR: out std_logic;
        Ax: out std_logic_vector(15 downto 0);
        Ay: out std_logic_vector(15 downto 0);
        Az: out std_logic_vector(15 downto 0);
        Wx: out std_logic_vector(15 downto 0);
        Wy: out std_logic_vector(15 downto 0);
        Wz: out std_logic_vector(15 downto 0);
        Hx: out std_logic_vector(15 downto 0);
        Hy: out std_logic_vector(15 downto 0);
        Hz: out std_logic_vector(15 downto 0);
        ROLL: out std_logic_vector(15 downto 0);
        PITCH: out std_logic_vector(15 downto 0);
        YAW: out std_logic_vector(15 downto 0)
    );
end;

renderer.vhd
entity renderer is
    port
    (
        CLK: in std_logic;
        RST: in std_logic;
        READY: in std_logic;
		
        --  见上
		GAME_STATE: in std_logic_vector(1 downto 0); 
    	PLAYER_POS: in std_logic_vector(9 downto 0);
    	REMAIN_LIFE: in std_logic_vector(2 downto 0);
    	SCORE: in std_logic_vector(19 downto 0);
    	CROW_IN_SCREEN: in std_logic_vector(7 downto 0); 
    	CROW_ROW: in std_logic_vector(15 downto 0); 
    	CROW_POS: in std_logic_vector(79 downto 0); 
    	HAS_SHIT: in std_logic_vector(31 downto 0);
    	SHIT_HEIGHT: in std_logic_vector(319 downto 0); 
    	
        SRAM_READY: in std_logic_vector(19 downto 0);
        RENDER_ADDR: out std_logic_vector(19 downto 0);
        RENDER_DQ: inout std_logic_vector(15 downto 0);
        RENDER_WE_n: out std_logic;
        RENDER_OE_n: out std_logic
    );
end;

vga_controller.vhd
entity vga_controller is
    generic
    (
        clock_freq: integer := 40000000;

        h_active: integer := 800;
        h_front_porch: integer := 40;
        h_sync_pulse: integer := 128;
        h_back_porch: integer := 88;

        v_active: integer := 600;
        v_front_porch: integer := 1;
        v_sync_pulse: integer := 4;
        v_back_porch: integer := 23
        -- TODO: sync pole
    );
    port
    (
        VGA_CLK: in std_logic;
        RST: in std_logic;

        -- TODO: refactor, 见上
        VGA_ADDR: out std_logic_vector(19 downto 0);
        VGA_DQ: inout std_logic_vector(15 downto 0);
        VGA_WE_n: out std_logic;
        VGA_OE_n: out std_logic;
        SRAM_READY: in std_logic;

        HSYNC: out std_logic;
        VSYNC: out std_logic;
        RED: out std_logic_vector(3 downto 0);
        GREEN: out std_logic_vector(3 downto 0);
        BLUE: out std_logic_vector(3 downto 0)
    );
end;


uart.vhd
entity uart is
    generic
    (
        CLK_FREQ: integer := 80000000;
        BAUD: integer := 115200 -- 波特率
    );
    port
    (
        CLK: in std_logic;
        RST: in std_logic;
        RXD: in std_logic;
        
        DATA_READ: out std_logic_vector(7 downto 0);
        DATA_READY: out std_logic;
        DATA_ERROR: out std_logic
    );
end;

bootloader.vhd
entity bootloader is
    port
    (
        CLK: in std_logic;
        RST: in std_logic;

        BOOT_ADDR: out std_logic_vector(19 downto 0);
        BOOT_DQ: inout std_logic_vector(15 downto 0);
        BOOT_WE_n: out std_logic;
        BOOT_OE_n: out std_logic;

        DONE: out std_logic;

        -- TODO: SD interface
    );
end;

spi.vhd
entity spi is
    port
    (
        CLK: in std_logic;
        RST: in std_logic;

        SCLK: out std_logic;
        MOSI: out std_logic;
        MISO: in std_logic;

        -- TODO
        DIN: in std_logic_vector(7 downto 0);
        DOUT: out std_logic_vector(7 downto 0);
        WE: in std_logic
    );
end;